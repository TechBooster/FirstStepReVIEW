= 仕様書を作ろう

ReVIEW で仕様書を書くと

 * PDF にするのが簡単
 * バージョン管理ツールで変更履歴や差分が見やすい
 * 複数人で管理するときにマージが楽

などの利点があります。

仕様書_20131128.doc など見かけることもあるかと思いますが、
見つけたら焼き払いましょう。

「敵だー！焼き払え！なぎ払え！」


== Suica Reader の仕様書を ReVIEW で書いてみる

例として、私が公開している Suica Reader@<fn>{suicareader} という Android アプリの仕様書を ReVIEW で
書いてみます。
このアプリは、NFC を使って Suica や PASMO などの交通系ICカードの情報を見るものです。

//footnote[suicareader][@<href>{https://play.google.com/store/apps/details?id=yanzm.products.suicareader}]


一口に仕様書と言っても、要求仕様書、機能仕様書、テスト仕様書などいろいろありますね。
ここでは要求仕様書を書いていきます。
要求仕様書を書くにあたって、Suica Reader に対する要求を明確にしておかないといけません。

=== Suica Reader に対する要求

==== 起動方法
 1. ランチャーから起動できる
 1. カードをかざして起動できる

==== 交通ICカード読み取り方法
 1. NFCアンテナのあたりに交通ICカードをかざして読み取れる
 1. アプリを起動していない状態からでも読み取れる

==== データ表示方法
 1. 個々のデータをカードUIで表示したい
 1. 新しいデータが上にくるように表示したい

==== 履歴へのデータ登録方法
 1. 読み取ったデータを履歴に入れるかどうか選択したい
 1. 自動でいつも履歴にいれる設定がほしい

==== 履歴データの表示方法
 1. カード毎の履歴を表示したい
 1. どのカードの履歴を表示するか選択できるようにしたい

==== アプリ情報の表示方法
 1. アプリのバージョンを確認できるようにしたい

==== デザイン
 1. 2.x でも 4.x と同じ見ためがいい

==== CSVエクスポート
 1. 読み取ったデータをCSVファイルとして書き出したい（有料オプション）

==== 駅名修正依頼
 1. 簡単に駅名修正依頼メールが出せるようにしたい

要求としてはこんな感じです。
では、この要求から要求仕様を書いてみましょう。

//list[specification1][Suica Reader の要求仕様書 suicareader_specification.re]{
= 前提条件（使用条件）

 * ハードウェア構成
 ** スマートフォンおよびタブレット
 ** NFCに対応していること
 * OS
 ** Android 2.3.3 以上

= 機能的要求

== 起動方法

 1. ランチャー内のアプリアイコンをタップすることで起動できること
 2. 新規起動時はカード読み取り画面であること
 3. Felicaカードがかざされたことをシステムが検知した場合、起動アプリの選択肢に本アプリが含まれること
 4. NFC検知から本アプリが起動された場合、読み取り画面を表示し、自動的にカードのデータ読み取りを開始すること 

== 交通ICカード読み取り方法

 1. 読み取り画面が表示されている場合、カードの検知を優先的に受け取ること
 2. システムからFelicaカードがかざされたことを通知されたら、データ読み取りを開始すること
 3. 読み取り中はプログレスを表示すること
 4. 読み取りに失敗した場合は、再度かざすようメッセージを表示すること

== データ表示方法

 1. 個々のデータのNo、日付、処理金額、処理内容、残高を表示すること
 2. データの各項目をカード上に表示し、カードが縦に並ぶこと
 3. Noが大きいデータが上にくるように表示すること
 4. スクロールしてNoの小さいデータを表示できること

== 履歴へのデータ登録方法

 1. 読み取ったデータの表示画面に、履歴に追加するボタンを表示すること
 2. ボタンがタップされたら、履歴にデータを追加すること
 3. 読み取り時に自動で履歴に入れる設定（ON/OFF）があること
 4. 自動履歴追加がONの場合、履歴に追加するボタンは表示しないこと
 5. 自動履歴追加がONの場合、読み取ったデータを表示するときに履歴にも追加する

== 履歴データの表示方法

 1. 履歴に追加されているカードの一覧がリストで表示されること
 2. 特定のカードを選択したら、そのカードの履歴を表示すること
 3. 履歴データの表示は、読み取りデータの表示と同じであること

== アプリ情報の表示方法

 1. 設定にInfo項目を用意すること
 2. Info項目をタップされた場合、バージョンなどのアプリ情報をダイアログで表示すること

== デザイン

 1. 2.x でも ActionBar を使ったデザインになること

== CSVエクスポート

 1. 読み取ったデータをCSVファイルとして書きだすボタンを用意する
 2. 有料オプションを購入したアカウントのみボタンを表示する
 3. ボタンをタップされたら、SDカード内の SuicaReader フォルダにCSVファイルを書き出す
 4. CSVファイルは、1行が1つのデータに対応し、No、日付、処理金額、処理内容、残高が含まれること

== 駅名修正依頼

 1. 読み取ったデータに対してユーザーが指定することで、駅名修正依頼メールの文章を生成するためのダイアログを表示できること
 2. ダイアログでは、正しい駅名を入力できること
 3. ダイアログから、メールのタイトル、本文が入力された状態のメーラーを起動できること


= 非機能的要求

== デザインの指定

 * Android のデザインガイドラインに従うこと

== パフォーマンスの指定

 * ANR が起こらないこと

== プログラム・サイズの制限

 * なし

== apk サイズの制限

 * なし

== 操作性に関する規定

 *タッチインタラクションがある部分は、Android のデザインガイドラインに沿った大きさを確保すること

== 保守性に関する規定

 * ソースコードを git で管理すること

== 移植性に関する規定

 * NFC に関連する部分はライブラリプロジェクトとしてわけること


= 開発条件

 * 開発環境：Eclipse ADT bundle
 * プログラミング言語：Java（Android開発向け）


= 納入条件

== 最終納入物

 * リリース用のキーで署名された apk ファイル

== 受け入れ条件

 * テスト仕様書に記述されたテストにすべてパスすること
 * テストにパス出来なかった場合、パス出来るように修正すること

= スケジュール

もうできてるから割愛

= 変更履歴

ここももうできてるから割愛
//}

こんな感じになりました。

これを review-pdfmaker で PDF にします。
このとき、仕様書向けの設定ファイルが必要になりますよね。

//list[specification_settings][仕様書向けの設定ファイル config.yaml]{
# 要求仕様書むけの設定ファイル例。

bookname: SuicaReader_要求仕様書
# タイトル
booktitle: SuicaReader要求仕様書
# 著者
aut: あんざいゆき
# 出版
prt: 株式会社ウフィカ
# 版
date: v1.0.0

# LaTeX用のスタイルファイル(styディレクトリ以下に置くこと)
# texstyle: samplemacro
# LaTeX用のdocumentclassを指定する
# texdocumentclass: ["jsarticle", "b5paper,oneside"]
# 目次として抽出するレベル
toclevel: 3
# セクション番号を表示するレベル
secnolevel: 2
# 表紙を出力する
titlepage: true
# 目次を出力する
toc: true
# review-compileに渡すパラメータ
# params: --stylesheet=sample.css
//}

.re ファイルを CHAPS というファイルに書いておく必要があります。

//list[chaps][CHAPS]{
suicareader_specification.re
//}

ここまできたら、ついにPDFに変換！

//cmd{
$ review-pdfmaker config.yaml
//}

//image[1][生成されたPDF例][scale=0.6]{
//}

いい感じのPDFができたよ！
元がプレインテキストなのでソースコードと一緒に git で管理するのがおすすめです。

== まとめ

この章ではReVIEWを使って仕様書を作る方法を紹介しました。実際の仕様書にはもっと多くの項目、情報が入ってくると思います。もちろん画像や表を入れることができますし、本文から画像や表を参照する際に自動採番なので、番号がずれる心配がありません。画像ファイルとプレインテキストに分かれているため、画像の差し替えも簡単です。奥付に履歴を入れることもできます。

このように、仕様書を書くのにもReVIEWは適していると思います。ReVIEWで快適な開発を！






