= ReVIEW入門

//lead{
本章ではReVIEWとは何かについて説明します。
ReVIEW記法の特徴や、それを文書の作成に用いる上での利点・注意点を紹介していきます。
//}

#@# amedama注釈: ReVIEW本体のプロジェクトについての説明が実は抜けている。「ReVIEWとは多種類の出力フォーマットに対応した云々」とかそういう。それはPREDEFサイドで一言入ってるものと仮定した。
#@# review by KG: リードで"ReVIEWとは何かについて説明します。"とあるので、ここで説明しておかないとまずい気がします。
#@# 章全体で説明する、という意味なのです。

=== ReVIEWを用いた原稿の例

ReVIEW（「れびゅー」と読みます）の定義を説明する前にまず雰囲気を感じてもらうため、ReVIEWを用いた実例を見てみましょう。
@<list>{effective_android_sample_1}は書籍『Effective Android』@<fn>{about_effective_android}の筆者担当分の冒頭です。
紙面の都合で原文にはない改行などが含まれていますが、原稿ほぼそのままです。

//footnote[about_effective_android][@<href>{http://tatsu-zine.com/books/effective-android}]



#@# ここからしばらく編集はしてはいけない。


//list[effective_android_sample_1][『Effective Android』38章の冒頭]{
= Google Drive APIを使ってファイルをダウンロードする

本章では、PythonスクリプトからGoogle Driveに保存されているファイルを取得する方法を紹介します。
Androidとは直接関係ありませんが、
同様のAPIをAndroid上で利用する際に参考になるかもしれません。

== 収録されている背景

『Effective Android』同人誌版の執筆が行われていた頃、
原稿はGoogle Drive上で管理されていました。
一部の技術者の希望によりgitも用いる運用に途中から切り替えたのですが、
全員がgitを利用できるわけではないため、
原則Google Driveにファイルをアップロードとし、
gitは希望者が選択して用いる、という体制になりました@<fn>{not_used}。

//footnote[not_used][本稿執筆時点ではすでにこの体制は終了しています。]

このとき、管理者がGoogle Drive上のファイルを手動でダウンロードして
gitプロジェクトに取り込んでいると聞き、
私はその作業を自動化できるかもしれないと考えました。

Google Drive APIとそのSDKはGoogleから無料で提供されていました。
少し調べた結果、今回の目標のためにはそれを使えばよいことが分かりました。

 * What Can You Do with the Drive SDK?＠<br>{}@<br>{}    ＠<href>{https://developers.google.com/drive/about-sdk}
//}


#@# ここまで

これがReVIEWのコンパイラによって@<img>{effective-android-sample-1}のようなPDFに変換されます。


== ReVIEWとは何か

この例により「ReVIEW」には実は二つの異なる側面があることがわかります。
「ReVIEW記法」と「ReVIEWツール」の側面です。

まず「ReVIEW記法」について。
例で紹介した文章では、いくつか日本語では一般的でない記号が含まれています。
それらが、以下のように解釈されています。

 * 行頭に「=」を並べると、PDFではその行は章や節と解釈される。
 * 空行で区切ると段落になる。
 * @<code>{//footnote}という命令で脚注を作ることが出来る。

人が読む文章の中に、機械が解釈するための命令を含めることで、見出しや段落、フォントサイズといった情報を埋め込んでいます。
このような言語は、一般に「軽量マークアップ言語」と呼ばれます。
「ReVIEW記法」はそういった軽量マークアップ言語の一つです@<fn>{what_is_lightweight}。

//footnote[what_is_lightweight][「軽量」でない「マークアップ言語」もあります。境目は曖昧ですが、例えば後述するHTMLやTeXは「軽量」とはあまり呼ばれないようです。人にとって記述しやすく読みやすいと思えるかが一つのポイントのようです。]

次に「ReVIEWツール」について。
「ReVIEW記法」で書かれた上記の文章をPDFに変換したツールもまたReVIEWと呼ばれます。
今回はPDFへ変換しましたが、PDFの他にも様々な形式のファイルを出力できます。

 * HTML
 * EPUB@<fn>{about_epub}
 * InDesign XML@<fn>{about_indesign}
 * （..その他）

//footnote[about_epub][EPUB（イーパブ）は電子書籍の標準規格の1つです。]
//footnote[about_indesign][Adobe InDesign（あどび いんでざいん）はAdobe社のプロプライエタリなDTP（Desktop・Publishing)ソフトで、InDesign XMLはそれが理解するXMLのフォーマットです。XMLの方はReVIEWでは「IDGXML」という表記をされることもあります。]
//image[effective-android-sample-1][38章のPDF出力例。章や脚注の処理が自動的に行われている][scale=0.5]{
//}

「ReVIEW」という表現で、軽量マークアップ言語としての「ReVIEW記法」を指す場合と、ReVIEW記法で記述した原稿を処理する「ReVIEWツール」を指す場合がある点、注意してください。

== ReVIEWの特色

文章を記述するための軽量マークアップ言語はReVIEWの他にもいくつかあります。
例えば、Wikipediaなどで使われるWiki記法@<fn>{about_wiki}も軽量マークアップ言語です。
IT技術者業界では、他にもMarkdown@<fn>{about_markdown},reStructuredText@<fn>{about_rst},Textile@<fn>{about_textile}といった例があります。

他にも選択肢がある中で、ReVIEWを選択するメリットとは何でしょうか。

//footnote[about_wiki][Wiki（ウィキ）はWebブラウザからWebページを編集して皆で共有できるシステムのこと。語源はハワイ語の「速い」で、Webページの作成や更新が速く出来るというWikiの特徴を良く示している。(Wikipediaやe-Wordsより)]
//footnote[about_markdown][Markdownの利用例としてStack Overflowが有名。日本ではIT技術ブログとしてQiitaなどが採用している。文法に「方言」が多く、Stack OverflowもQiitaも微妙に書き方が違う。]
//footnote[about_rst][reStructuredText（ReST、RSTなど色々書き方がある）は、プログラミング言語Pythonの技術ドキュメント記述によく使われる。]
//footnote[about_textile][Textileはプログラミング言語Ruby界隈で人気がある。同言語で書かれたプロジェクト管理ソフト『Redmine』でも採用されている。]

#@# レビュー by わかめ 脚注だけ見てもある程度意味が通じるように、Markdownは みたいな枕詞あったほうがよいのでは
#@# なんかちょっと冗長な気がするが……短くしつつそれぞれのキーワードが主役だと分かるようにしてみた。

=== 技術書の執筆・編集を想定して作られている

ReVIEWは特に、技術「書籍」の執筆と編集を想定しており、その現場と相性が良い設計になっています。

ReVIEWはもともと、青木峰郎(@mineroaoki)氏@<fn>{about_mineroaoki}が自身の著書の執筆のために開発を始めました。

現在では、武藤健志(@kmuto)氏@<fn>{about_kmuto}、高橋征義(@takahashim)氏@<fn>{about_takahashim}、角征典(@kdmsnr)氏@<fn>{about_kdmsnr}らが開発・保守をしています。
この4名全員、本業・副業を通じて技術書籍等の執筆・編集に関わっていたか、あるいは現在進行形で関わっており、その業務の中でReVIEWを利用しています。

開発開始時から現在に至るまで、書籍の編集・出版で実際に使われることを意識して作られてきたわけです。

#@# レビュー by わかめ なんかIssue立てるとよくレスつけてる人(ここに載ってない)は誰なんじゃろ？ Mii アイコンぽい人
#@# 角征典氏ですね。ReVIEWのREADME.mdのクレジットにもあるので、ミサカは会ったこともないのに堂々とその名前を追加します。

商業出版の実績も多数あります。
武藤氏の所属するトップスタジオでは、すでに50冊程度の書籍の編集でReVIEWを使用しているそうです。
また、高橋氏の主宰する達人出版会では、自社で出版しているPDF・EPUBの制作用フォーマットとしてReVIEWを採用しています。

//footnote[about_mineroaoki][古くからのRuby愛好家。最近の著書に『ふつうのコンパイラを作ろう』『ふつうのHaskell』プログラミングなど。]
//footnote[about_kmuto][編集・翻訳・デザイン等を行う株式会社トップスタジオの執行役員。紙の商業出版の編集にReVIEWを利用してきた実績多数。]
//footnote[about_takahashim][株式会社達人出版会代表取締役、日本Rubyの会代表理事。]
//footnote[about_kdmsnr][アジャイル開発手法に早くから注目し、関連書籍の翻訳等を手がけている。訳書に『Team Geek』『Running Lean』『リーダブルコード』など。]
//footnote[top_studio_url][@<href>{http://www.topstudio.co.jp/}]
//footnote[tatsuzin_url][@<href>{http://tatsu-zine.com/}]

=== 拡張性に優れている

商業出版の現場に対応するため、ReVIEWでは拡張性の高い柔軟な構文を採用しています。

出版の現場では、HTMLのみならず、EPUBやInDesign XMLといった複数種類のフォーマットに向けて出力を行う必要が多々あります。
そういった状況に1種類の原稿データで対応したい、それも原稿の書きやすさをなるべく落とさないように……そういう要求にReVIEWは応えられます。

ReVIEWは、出力形式の特長を引き出すための独自構文を追加できる上、そうした追加を行なっても他のケースへの悪影響を抑えることができます。
書いた後から出力先が増えた場合にも、元の原稿に新しい出力についての情報を書き足せば良いのです。

一方、他の軽量マークアップ言語では、しばしばアウトプットとしてHTMLフォーマット1種類に特化して作られているため、こういった形で拡張を行うことがしばしば難しくなります。
軽量でないマークアップ言語は習熟に時間がかかるため、そもそも原稿を書くのが大変です。

#@# レビュー by わかめ 必要があればある書籍限定の独自構文を追加することもできる という言及があってもいいかも
#@# その指摘部分を強化して他は消した。

=== 既存のマークアップ言語で原稿を書くとこうなる

軽量マークアップ言語のMarkdownを用いて技術ブログを書いていたとします。
この時点では、記事の執筆は快適なはずです。

記事を書きためて人気もそこそこ、というところで、
ブログ上の複数の記事をまとめて、一冊の技術者向け同人誌にしようと思い立ったとします。

Markdownは紙の出力を得意としないので、紙媒体に強いTeX@<fn>{about_tex}などを介してPDFを生成することになるでしょう@<fn>{using_word}。
TeXはHTML出力向けではないため、TeXとMarkdownの両方でデータを管理するか、一方からもう一方へ変換することで原稿を管理することになります@<fn>{about_pandoc}。

//footnote[using_word][某社のワープロソフトを用いてもここで説明する状況は変わらないです。もう少し面倒な事態になるかもしれません。]
//footnote[about_tex][読み方は多様らしいですが、筆者は「テフ」と読んでいます。記述は比較的面倒なため、マークアップ言語ながら「軽量」と思う人は稀な気がします。]
//footnote[about_pandoc][例えばMarkdownからTeXであれば、Pandocがサポートしているようです。@<br>{}@<href>{http://johnmacfarlane.net/pandoc/}]

この時、少なくとも二つ、回避できない問題が発生します。

 * 両方の文法を用いることになる。特にTeXも併用することになるため、Markdownのみを用いていたときほど、快適に執筆出来なくなる。
 * 相互の変換時に、レイアウトのニュアンスが壊れるケースが発生する。特に紙面上でTeXが持つ表現力がHTMLで失われる。

2種類のマークアップ言語を行き来することは、「表現力」と「書きやすさ」の性質が異なる世界を行き来することを意味します。
当然、その過程で片方にはない要素を執筆者が補う手作業が発生します。

さて、フォーマット問題を乗り越えて同人誌を発行した後「電子書籍版も発行して欲しい」という要望が寄せられました。
出来れば叶えたいところです。

しかしMarkdownもTeXも、電子書籍に適したフォーマットというわけではありません。
つまりここでも、紙に印刷するときと同様の困難が発生してしまいます@<fn>{last_boss_will_be_indesign}。

//footnote[last_boss_will_be_indesign][人気が出て出版社から紙の商業出版のオファーがあったとしましょう。今度はInDesign対応を協議することになるかもしれません。]

一方、ReVIEWはもともとHTML、PDF、EPUBといった異なる要求を持つ出力に対応できるだけの柔軟性を持っていますから、このような困難はなくなるか、少なくとも大分軽減されます@<fn>{not_perfect}。

//footnote[not_perfect][特に商業出版では、ReVIEWを用いていても後半の工程で編集者による手作業が必要となることが多いそうです。ReVIEWはそういう現状も見越していて、その工程向けの「指示書」的なフォーマットすらサポートしています。]

現在では、技術者が色々な媒体で情報発信を容易に出来る時代ですから、原稿執筆もスマートにしたいものです。
ReVIEWはそれをスマートにサポートしてくれるはずです。

#@# ---以下、コメント墓場---
#@# レビュー by わかめ 僕の考えでは、Markdownやtextileとの一番の差は、拡張可能な構文構造になってるとこだと思う。HTMLと同じ。<囲みます>この形式</囲みます>は拡張に強い…。
#@# コメント by あめ玉 自分なりの解釈で論旨に組み込んでみました。
#@# by わかめ Yay!

#@# レビュー by わかめ textへの出力もあります TOPBuilderというのがそれ トップスタジオ社のDTPオペレータ向けのマークアップがされた形式で出てくる。ようするに人力トランスレータ用フォーマット。某I社の編集さんとかに見せたら、書籍に出す際には下手にidgxmlよりtextのほうがいいわ…と言われた。他の、ReVIEW対応してない出版社の場合へはDTPへの指示がわかりやすいフォーマットであるTextが喜ばれる事例多いのだと思う。
#@# レビュー by わかめ 実際の出版工程になると、InDesignのフェーズに入るとそこで行った修正をReVIEW版にバックポートするのが手間なので、マスターがInDesignに移行するという問題がある。この問題に対応してReVIEWをマスターのまま作業し続けられるのはおそらくトップスタジオ(というか武藤さん)だけだと思われる。羊による補足求む。
#@# レス by あめ玉 ここはfootnoteで巻きとってみました。

#@# ---以上、コメント墓場---


=== 実例としての『Effective Android』

上記の例は、机上の空論ではありません。

TechBooster『Effective Android』は、コミケット84@<fn>{c84}での紙の同人誌版から始まり、達人出版会による電子書籍版を経て、インプレス社から紙の商業誌として出版されました@<fn>{not_yet}。
十数人からスタートした著者数は、版を重ねる毎に増加し、中途でAndroid本体のアップデート（4.4）が挟まって原稿の大修正が必要になったりと、上記の例よりもさらに苛烈な執筆状況でした。

その詳細は他章に譲るとしても、ここではそういう実例においてReVIEWが全面的に採用されたという点を指摘しておきます@<fn>{ea_pages}。

//footnote[c84][2013年の夏コミ。]
//footnote[not_yet][厳密には、本章執筆時点ではまだ編集段階です。]
//footnote[ea_pages][同人誌版で約190ページほど、インプレス版については最終版ではありませんが、執筆時点で手元にあるPDFでは約500〜600ページ程度です。どちらにしても「薄い本」でないことは分かるかと思います。]


#@# ---以下、コメント墓場---
#@# レビュー by わかめ 同人誌→紙の同人誌 のほうがわかりやすいと思われ。PDFとして入稿→達人さんではepubとPDF→書籍はInDesign。
#@# レス by あめ玉 thx. 直した。
#@# レビュー by わかめ ReVIEW記法より、gitの操作のほうがボトルネックになりやすく、Dropboxを使って彼らの原稿をsyncしてmhidakaがたまに代わりにコミットする運用だった。みたいな具体的エピソードあってもいい可能性が微レ存
#@# レス by あめ玉 まぁここはReVIEWに席を譲るのが本著の趣旨ですので :-))
#@# ---以上、コメント墓場---


=== オープンソースである

ReVIEWの利点としてもう一点、オープンソースであるという点も指摘したいと思います。

RubyによるReVIEWコンパイラ実装は世の中に公開されており、自由に利用できます@<fn>{review_url_again}。
バグ報告や機能拡張のリクエストもGitHub上で受け付けており、技術者であればpull request@<fn>{pull_request}を直接行うことも出来ます。
『Effective Android』執筆過程で、その執筆者もバグ報告やpull requestを通じてReVIEW開発に貢献しました。

//footnote[review_url_again][@<href>{https://github.com/kmuto/review}]
//footnote[pull_request][メインの開発者に「こういう実装を作ったので本家に取り込んでください」と伝える方法の一つです。GitHubでよく使います。]

#@# レビュー by わかめ github は GitHub 表記のほうがいいと思うの
#@# レス by あめ玉 直したの

この利点はこれまでと異なり、他のマークアップ言語に対するものではありません。
本章で比較されている他の有名なマークアップ言語も、オープンソース実装とセットであることが一般的だからです。
ここでこの論点を示すのは、出版業の他のプラットフォームとの違いを示すためです。

特定の企業がツールや仕様を全て握っていて外部のコントリビュータによる修正を受け付けるチャンスを与えない場合、バグが一向に修正されないまま利用者が悩まされる、ということが往々にしてあります。
そして、筆者の印象では出版関連ツールはこの手のプロプライエタリのソフトが一般的です。

武藤氏の2012年の発表資料の一節を@<img>{kmuto-is-shouting}に示します。

//image[kmuto-is-shouting][オープンでないソフトのバグは直されないと悲惨][scale=0.25]{
//}

ReVIEWのコミュニティはオープンであるため、クローズドなソフトが抱えることのある「バグが放置されて自分で直すことも出来ない」という事態を防ぐことが出来ます。

== ReVIEWの向いている分野、向いていない分野

ReVIEWは、ブログのように一貫したスタイルに基づいて内容が記述されるページ構成をサポートするようにできています。（@<img>{review-friendly-books}）

//image[review-friendly-books][技術書や論文のような一本道の文章には大変強いです][scale=0.075]{
//}

そのため、細切れのストーリーを別のレイアウトで表現したり、見開きを跨いで図画を表示するといった用途にはあまり向いていません。(@<img>{review-hostile-books})

//image[review-hostile-books][ページをまたぐレイアウトがあったり、コラムが別スタイルで乱舞するものは不得意です][scale=0.075]{
//}

他のツール同様、ReVIEWも全ての表現を実現するためのものではありませんので、利用する上でその点だけ押さえておく必要があります。


== ReVIEWの課題

本書・本稿の目的は、ReVIEWの良さを読者に伝えることです。

しかし公平な視点に立つと、ReVIEWには「筋の良さ」がある一方で、課題もあると筆者は考えます。

読者が更に適切な評価を行えるよう、ReVIEWを利用する上で問題となりそうな点を挙げていきます。

=== 他マークアップ言語と比べるとコミュニティが小さい

まず単純に、ユーザ数がまだまだ少ない点があげられます。

商業出版でも利用実績があることは既に紹介しましたが、現時点では「多数派」というわけではありません。
ブログから原稿をアップデートする例を挙げましたが、こういったReVIEWを採用する事例自体、他のマークアップ言語と比べるとまだまだ少ないのが現状です。
そもそも、ブログ等で初めからReVIEW文法をサポートしているものは現状ではほとんどありません@<fn>{author_was_dubious}。

//footnote[author_was_dubious][筆者も当初はマイナーなマークアップ言語を新たに使うことにやや懐疑的だった記憶があります。]

開発者の数でもまだまだこれからです。
Ruby以外でもReVIEW記法を解釈する実装が欲しいことはありますし、WordPressのような代表的なブログソフトにも、ReVIEWフォーマットをそのままブログ表示に適用できるプラグインが欲しい、と筆者は思います@<fn>{review_js}。

//footnote[review_js][@<chapref>{vvakame}で紹介するReVIEW.jsは、この課題に対する前向きなアプローチの一例です。]

日本人コミュニティ以外での利用例がほとんどないのもまた将来の課題です。
ReVIEWの開発時のディスカッション、バグレポートの対応はほぼ日本語で、他言語の利用者・開発者は見当たりません。
そもそも、日本の組版事情にあわせて作成されているため、ユーザ層の広がりが国内に留まりがちです。
この問題の良い側面は、私達にとって問い合わせの敷居が低いということです。

=== Windows環境では利用する敷居が特に高い

ReVIEWは、現状ではWindows環境で工夫なしに利用することができません@<fn>{review_is_no_good_on_windows}。
Windowsでも利用できるVirtualBoxの仮想イメージが武藤氏によって公開されていたり@<href>{http://d.kmuto.jp/20130811.html}、Web上ではCygwin@<fn>{about_cygwin}を用いたビルド成功例が紹介されていたりします@<fn>{review_on_cygwin}が、それでもUNIX系OSでの利用実績のほうが豊富な印象です。

//footnote[review_is_no_good_on_windows][そもそも @<href>{https://github.com/kmuto/review/issues/79}]
//footnote[about_cygwin][Cygwin（シグウィン）は、Windowsオペレーティングシステム上で動作するオープンソースなUNIXライクな環境の一つ(Wikipediaより)。]
//footnote[review_on_cygwin][@<href>{http://d.hatena.ne.jp/kaorun55/20120710/1341889820}]


== まとめ

ReVIEWは、書籍の出版に適した軽量マークアップ言語と、ReVIEW記法で記述した原稿を処理するツールの総称です。

#@# これは3bd4643fの有山さんの文を元にしている。thx!

課題もあるものの、ReVIEWは今後非常に伸びしろの多い、期待感を持たせる原稿執筆プラットフォームです。
個人での書籍執筆を想定する場合だけでも、その利点を即座に発揮出来るツールとなっています。

本著を通じて読者が使い始めることで、ReVIEWが今後より強力なプラットフォームになっていくことを願います。

最後に、読者のさらなるReVIEW理解のため、本章の執筆の上で参考にしたURL、記事を紹介します。

 * @<href>{http://d.hatena.ne.jp/hdk_embedded/20130810/1376148749}
 ** TechBoosterの代表日高氏による勉強会のまとめ。下記のリンクを全て含む。
 * @<href>{https://docs.google.com/file/d/0BymMSOvfiOaWYXNTd0JGNlk3Yzg/edit}
 ** 上記勉強会において利用された開発者武藤氏による資料
 * @<href>{http://kmuto.jp/events/page2012/page2012.pdf}
 ** 2012年2月のpage2012にて武藤氏が利用したとされる資料

#@# レビュー by わかめ Pandocの他に、Sphinxも気になりマスね。すえひろが使っているらしい。
#@# レス by あめ玉 Sphinxは直接の競合という印象で個人的にも興味あります。ただ、文法がreStructuredTextで、ざっと調べる限りではここで書いてる「他のマークアップ構文」の欠点そのまんまストレートに抱えている気がするので、敢えて今回は名前付きで書かないことにしてます。早いとこしらべたいなー。
#@# レビュー by わかめ Sublime Text2のプラグインとかemacsとかvimとかのエディタ周りって誰か別の人が書くんだっけ？
#@# レス by あめ玉 いないのでは
